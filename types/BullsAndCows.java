package types;

import java.util.List;



public class BullsAndCows extends AbstractMastermindGame {
	
	
	/**
	 * Constructs a BullsAndCows game instance with a specified seed, size, and colour array.
	 * Initializes the secret code and prints it to the console.
	 *
	 * @param seed the seed used for randomizing the secret code.
	 * @param size the size of the secret code.
	 * @param colours an array of Colour objects representing the possible colours for the code.
	 */
	public BullsAndCows(int seed, int size, Colour[] colours) {
		super(seed, size, colours);
		}
	
	/**
	 * Determines if the current round of the game has finished.
	 * The round is finished if the secret code is revealed or the maximum number of trials is reached.
	 *
	 * @return true if the round is finished, false otherwise.
	 */
	@Override
	public boolean isRoundFinished() {
		if (wasSecretRevealed() || getNumberOfTrials() >= MAX_TRIALS) {
			return true;
		}
		
		return false;
	}

	/**
	 * Returns the current score of the player in the game.
	 *
	 * @return the current score.
	 */
	@Override
	public int score() {
		return currentScore;
	}
	
	/**
	 * Updates the player's score by increasing it by a fixed amount (2000).
	 *
	 * @return true after updating the score.
	 */
	@Override
	public boolean updateScore() {
        currentScore += 2000;
        return true;}
	
	/**
	 * Provides a hint for the current game, calling the parent method to generate the hint 
	 * and halving the current score for each hint provided.
	 *
	 * @return the Colour hint generated by the parent method.
	 */
	@Override
    public Colour hint() {
		Colour newHint = super.hint();
		this.currentScore /= 2; 
        return newHint; 
    }
}
